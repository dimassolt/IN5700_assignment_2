//
// Generated file, do not edit! Created by opp_msgtool 6.2 from garbage_collection/messages.msg.
//

#ifndef __GARBAGE_COLLECTION_MESSAGES_M_H
#define __GARBAGE_COLLECTION_MESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace garbage_collection {

class GarbagePacket;

}  // namespace garbage_collection


namespace garbage_collection {

/**
 * Class generated from <tt>garbage_collection/messages.msg:4</tt> by opp_msgtool.
 * <pre>
 * packet GarbagePacket
 * {
 *     string command;
 *     int canId = -1;
 *     bool isFull = false;
 *     double travelTime = 0;
 *     string note;
 * }
 * </pre>
 */
class GarbagePacket : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string command;
    int canId = -1;
    bool isFull_ = false;
    double travelTime = 0;
    ::omnetpp::opp_string note;

  private:
    void copy(const GarbagePacket& other);

  protected:
    bool operator==(const GarbagePacket&) = delete;

  public:
    GarbagePacket(const char *name=nullptr, short kind=0);
    GarbagePacket(const GarbagePacket& other);
    virtual ~GarbagePacket();
    GarbagePacket& operator=(const GarbagePacket& other);
    virtual GarbagePacket *dup() const override {return new GarbagePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getCommand() const;
    virtual void setCommand(const char * command);

    virtual int getCanId() const;
    virtual void setCanId(int canId);

    virtual bool isFull() const;
    virtual void setIsFull(bool isFull);

    virtual double getTravelTime() const;
    virtual void setTravelTime(double travelTime);

    virtual const char * getNote() const;
    virtual void setNote(const char * note);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GarbagePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GarbagePacket& obj) {obj.parsimUnpack(b);}


}  // namespace garbage_collection


namespace omnetpp {

template<> inline garbage_collection::GarbagePacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<garbage_collection::GarbagePacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __GARBAGE_COLLECTION_MESSAGES_M_H

